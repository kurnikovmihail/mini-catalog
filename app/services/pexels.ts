// services/pexels.ts
import { createClient } from "pexels";

// –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ Pexels, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ
type PhotoSize =
  | "large"
  | "medium"
  | "small"
  | "original"
  | "large2x"
  | "portrait"
  | "tiny";
type PhotoOrientation = "landscape" | "portrait" | "square";

const client = createClient(
  "jcMYcC80FyknV8oH1F8k2CGjRzmhhIUQCBO0IwZ8MpT40D1iHsOxhaQ5"
); // –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π –∫–ª—é—á

// services/pexels.ts
// ... (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ PexelsPhotoSrc, PhotoSize –∏ client –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –≤—ã—à–µ)

// –¢–∏–ø –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—é 'src' —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ Pexels
type PexelsPhotoSrc = Record<PhotoSize, string> & Record<string, string>;

export async function getCarImage(
  brand: string,
  model: string,
  size: PhotoSize = "medium",
  orientation: PhotoOrientation = "landscape"
): Promise<string> {
  try {
    const query = `${brand} ${model}`;
    const response = await client.photos.search({
      query,
      per_page: 1,
      orientation: orientation,
    });

    // üí° –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏ –¥–ª–∏–Ω—ã –º–∞—Å—Å–∏–≤–∞
    if ("photos" in response && response.photos.length > 0) {
      // –°–æ–∑–¥–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ (—É—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫—É undefined –Ω–∞ array[0])
      const photo = response.photos[0]!;

      // üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—ä—è–≤–ª—è–µ–º photoSrc —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–∞, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–∂–Ω–æ –±—ã–ª–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.
      const photoSrc = photo.src as PexelsPhotoSrc;

      return photoSrc[size] || photoSrc.medium; // ‚úÖ –û—à–∏–±–∫–∞ '–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏–º—è "photoSrc"' —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞
    }

    // –ï—Å–ª–∏ photos –Ω–µ –±—ã–ª–æ –∏–ª–∏ –º–∞—Å—Å–∏–≤ –±—ã–ª –ø—É—Å—Ç
    return "/cars/placeholder.jpg";
  } catch (err) {
    console.error(err);
    return "/cars/placeholder.jpg";
  }
}
